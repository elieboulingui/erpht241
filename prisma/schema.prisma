
// Définition de la source de données (PostgreSQL)
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
}

enum AccessType {
  READ // Lecture seule
  WRITE // Accès complet
  ADMIN // Accès administrateur
}

enum Status_Contact {
  PERSONNE
  COMPAGNIE
}

// Enumération des rôles d'un utilisateur dans une organisation
enum Role {
  ADMIN
  MEMBRE
}

// Enumération des stages d'un contact
enum Niveau {
  PROSPECT
  CLIENT
  PROSPECT_POTENTIAL
}

enum DevisStatus {
  ATTENTE
  VALIDE
  FACTURE
  ARCHIVE
}

enum TaxType {
  TVA
  HORS_TAXE
}

// Modèle User - Utilisateur
model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role                 @default(ADMIN) // Rôle par défaut
  accessType          AccessType           @default(READ) // Accès par défaut
  accounts            Account[]
  sessions            Session[]
  authenticators      Authenticator[] // Support pour l'authentification WebAuthn
  organisations       Organisation[]       @relation("OrganisationMembers") // Organisation(s) dont l'utilisateur est membre
  ownedOrganisations  Organisation[]       @relation("OrganisationOwner") // Organisation(s) que l'utilisateur possède
  invitations         Invitation[] // Invitations envoyées à l'utilisateur
  passwordResetTokens PasswordResetToken[] // Tokens de réinitialisation de mot de passe
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isArchived          Boolean              @default(false) // Champ d'archivage
  archivedAt          DateTime? // Date d'archivage
  archivedBy          String? // ID de l'utilisateur ayant archivé
  FeedbackContact     FeedbackContact[]

  // Nouvelles relations
  notes             Note[] // Notes créées par l'utilisateur
  collaboratedNotes Note[] @relation("NoteCollaborators") // Notes sur lesquelles l'utilisateur collabore

  Devis Devis[]
}

// Modèle Organisation
model Organisation {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  logo        String? // URL du logo
  ownerId     String // ID de l'utilisateur propriétaire
  owner       User         @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade) // Relation inverse pour le propriétaire
  members     User[]       @relation("OrganisationMembers") // Membres de l'organisation
  invitations Invitation[] // Invitations envoyées aux utilisateurs
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isArchived  Boolean      @default(false) // Champ d'archivage
  archivedAt  DateTime? // Date d'archivage
  archivedBy  String? // ID de l'utilisateur ayant archivé
  Product     Product[] // Liste des produits associés à l'organisation
  Stock       Stock[]
  Contact     Contact[]    @relation("OrganisationContacts") // Contacts associés à l'organisation
  Category    Category[] // Catégories associées à l'organisation

  Brand Brand[]
  notes Note[] // Notes associées à l'organisation

  Devis Devis[]
}

// Modèle Account - Compte d'utilisateur pour l'authentification (OAuth, etc.)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Index composite sur provider et providerAccountId
}

// Modèle Session - Session utilisateur
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle VerificationToken - Token de vérification d'email
model VerificationToken {
  identifier String // L'email ou un identifiant unique pour l'utilisateur
  token      String // Le token de vérification
  expires    DateTime // La date d'expiration du token
  isArchived Boolean   @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage

  @@id([identifier, token]) // Clé primaire composée pour garantir l'unicité
}

// Modèle Authenticator - Informations pour l'authentification WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID]) // Identifiant composite pour l'authentification
}

// Modèle Invitation - Invitation d'un utilisateur à rejoindre une organisation
// Définir l'énumération pour le type d'accès

model Invitation {
  id             String       @id @default(cuid())
  email          String // Email de l'utilisateur invité
  organisationId String // ID de l'organisation
  role           Role // Rôle de l'utilisateur dans l'organisation
  accessType     AccessType // Type d'accès (READ, WRITE, ADMIN)
  invitedById    String // ID de l'utilisateur qui a envoyé l'invitation
  invitedBy      User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedAt      DateTime     @default(now())
  acceptedAt     DateTime? // La date où l'invitation a été acceptée (null si non acceptée)
  token          String       @unique // Le token de l'invitation
  tokenExpiresAt DateTime // Date d'expiration du token
  isArchived     Boolean      @default(false) // Champ d'archivage
  archivedAt     DateTime? // Date d'archivage
  archivedBy     String? // ID de l'utilisateur ayant archivé

  // Un utilisateur ne peut recevoir qu'une invitation unique par organisation
  @@unique([email, organisationId])
}

// Modèle PasswordResetToken - Token pour la réinitialisation de mot de passe
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String // ID de l'utilisateur
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique // Le token de réinitialisation
  expiresAt DateTime // Date d'expiration du token
  createdAt DateTime @default(now())
}

// Modèle Contact - Contact lié à une organisation
model Contact {
  id             String         @id @default(cuid()) // Identifiant unique du contact
  name           String // Nom du contact
  logo           String?
  adresse        String?
  status_contact Status_Contact @default(PERSONNE) // Status du contact (PERSONNE ou COMPAGNIE)
  email          String?        @unique // Email du contact (unique)
  phone          String? // Téléphone du contact (optionnel)
  niveau         Niveau // Stage du contact dans le processus (LEAD ou WON)
  tags           String? // Liste des informations supplémentaires sous forme de tab (ex: JSON, String[])
  organisations  Organisation[] @relation("OrganisationContacts") // Relation many-to-many avec Organisation

  createdAt  DateTime  @default(now()) // Date de création du contact
  updatedAt  DateTime  @updatedAt // Date de mise à jour du contact
  isArchived Boolean   @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage
  archivedBy String? // ID de l'utilisateur ayant archivé
  comments   Comment[] // Liste des commentaires associés au contact

  FeedbackContact FeedbackContact[]

  notes Note[] // Notes associées au contact

  Devis Devis[]
}

// Modèle Comment - Commentaire associé à un contact
model Comment {
  id        String   @id @default(cuid()) // Identifiant unique du commentaire
  content   String // Le contenu du commentaire
  createdAt DateTime @default(now()) // Date de création du commentaire
  contactId String // ID du contact associé
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade) // Relation avec le contact

  updatedAt DateTime @updatedAt // Date de mise à jour du commentaire
}

// Modèle Product - Produit
model Product {
  id             String       @id @default(cuid()) // Identifiant unique du produit
  name           String // Nom du produit
  description    String // Description du produit
  price          Float // Prix du produit
  images         String[] // Liste des URLs des images du produit
  actions        String? // Actions possibles (par exemple, JSON ou texte décrivant les actions)
  organisationId String // ID de l'organisation associée
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade) // Relation avec l'organisation

  createdAt  DateTime  @default(now()) // Date de création du produit
  updatedAt  DateTime  @updatedAt // Date de mise à jour du produit
  isArchived Boolean   @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage
  archivedBy String? // ID de l'utilisateur ayant archivé
  Stock      Stock[]

  categories Category[] @relation("ProductCategories") // Relation many-to-many avec Category

  DevisItem DevisItem[]
}

// Modèle Stock - Stock d'un produit
model Stock {
  id             String       @id @default(cuid()) // Identifiant unique du stock
  quantity       Int // Quantité disponible du produit dans le stock
  productId      String // ID du produit
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade) // Relation avec le produit
  organisationId String // ID de l'organisation associée
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade) // Relation avec l'organisation

  createdAt  DateTime  @default(now()) // Date de création du stock
  updatedAt  DateTime  @updatedAt // Date de mise à jour du stock
  isArchived Boolean   @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage
  archivedBy String? // ID de l'utilisateur ayant archivé
}

// Modèle Category - Catégorie de produit
model Category {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  logo           String?
  parentId       String?
  parent         Category?    @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children       Category[]   @relation("CategoryToCategory")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)
  archivedAt DateTime?
  archivedBy String?

  Product Product[] @relation("ProductCategories")
  Brand   Brand[]   @relation("CategoryBrands")

  @@unique([name, organisationId], name: "category_organisation_unique")
}

model Brand {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  logo           String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)
  archivedAt DateTime?
  archivedBy String?

  Category Category[] @relation("CategoryBrands")
}

// Modèle FeedbackContact - Retour d'un utilisateur sur un contact
model FeedbackContact {
  id        String   @id @default(cuid())
  message   String // Message du feedback
  contactId String // ID du contact concerné
  userId    String // ID de l'utilisateur ayant laissé le feedback
  createdAt DateTime @default(now()) // Date de création du feedback
  updatedAt DateTime @updatedAt // Date de mise à jour du feedback

  // Relations
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexation pour améliorer les performances des requêtes
  @@index([contactId])
  @@index([userId])
}

// Modèle Note - Notes créées par les utilisateurs
model Note {
  id       String  @id @default(cuid())
  title    String // Titre de la note
  content  String // Contenu de la note
  color    String  @default("default") // Couleur de la note (default, yellow, green, etc.)
  isPinned Boolean @default(false) // Note épinglée ou non
  lastModified DateTime // Date de dernière modification de la note
  

  // Relations
  userId String // ID de l'utilisateur créateur
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation avec un contact
  contactId String // ID du contact associé à la note
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  // Relation many-to-many avec les collaborateurs (autres utilisateurs)
  collaborators User[] @relation("NoteCollaborators")

  // Champs de suivi
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isArchived   Boolean        @default(false)
  archivedAt   DateTime?
  archivedBy   String?
  Organisation Organisation[]

  // Indexation pour améliorer les performances
  @@index([userId])
  @@index([contactId])
  @@index([isPinned])
}

model Devis {
  id             String       @id @default(cuid())
  devisNumber    String       @unique // Format "HT241062025"
  billingDate    DateTime     // Date de facturation
  dueDate        DateTime?    // Date d'échéance (optionnelle)
  taxType        TaxType      // Type de taxe
  status         DevisStatus  @default(ATTENTE) // Statut du devis
  totalAmount    Float        // Montant total HT
  taxAmount      Float        // Montant des taxes
  totalWithTax   Float        // Montant total TTC
  notes          String?      // Notes supplémentaires
  pdfUrl         String?      // URL du PDF généré
  
  // Relations
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  
  contactId      String
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  // Produits associés
  items          DevisItem[]
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
}

model DevisItem {
  id             String       @id @default(cuid())
  description    String       // Description de l'article
  quantity       Int          // Quantité
  unitPrice      Float        // Prix unitaire HT
  taxRate        Float        // Taux de taxe (ex: 0.2 pour 20%)
  taxAmount      Float        // Montant de la taxe
  totalPrice     Float        // Prix total HT
  totalWithTax   Float        // Prix total TTC
  
  // Relations
  devisId        String
  devis          Devis        @relation(fields: [devisId], references: [id], onDelete: Cascade)
  
  productId      String?
  product        Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
