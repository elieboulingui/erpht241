// Définition de la source de données (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Enumération des rôles d'un utilisateur dans une organisation
enum Role {
  ADMIN
  CLIENT
  MEMBRE
  PROPRIETAIRE
}

// Modèle User - Utilisateur
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(CLIENT)  // Rôle par défaut
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[] // Support pour l'authentification WebAuthn
  organisations Organisation[]   @relation("OrganisationMembers") // Organisation(s) dont l'utilisateur est membre

  ownedOrganisations Organisation[] @relation("OrganisationOwner") // Organisation(s) que l'utilisateur possède
  invitations   Invitation[]    // Invitations envoyées à l'utilisateur
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// Modèle Account - Compte d'utilisateur pour l'authentification (OAuth, etc.)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Index composite sur provider et providerAccountId
}

// Modèle Session - Session utilisateur
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle VerificationToken - Token de vérification d'email
model VerificationToken {
  identifier String   // L'email ou un identifiant unique pour l'utilisateur
  token      String   // Le token de vérification
  expires    DateTime // La date d'expiration du token

  @@id([identifier, token]) // Clé primaire composée pour garantir l'unicité
}

// Modèle Authenticator - Informations pour l'authentification WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID]) // Identifiant composite pour l'authentification
}

// Modèle Organisation - Organisation
model Organisation {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  logo      String?    // URL du logo
  ownerId   String     // ID de l'utilisateur propriétaire
  owner     User       @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade) // Relation inverse pour le propriétaire
  members   User[]     @relation("OrganisationMembers") // Membres de l'organisation
  invitations Invitation[] // Invitations envoyées aux utilisateurs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle Invitation - Invitation d'un utilisateur à rejoindre une organisation
model Invitation {
  id             String     @id @default(cuid())
  email          String     // Email de l'utilisateur invité
  organisationId String     // ID de l'organisation
  role           Role       // Rôle de l'utilisateur dans l'organisation
  invitedById    String     // ID de l'utilisateur qui a envoyé l'invitation
  invitedBy      User       @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedAt      DateTime   @default(now())
  acceptedAt     DateTime?  // La date où l'invitation a été acceptée (null si non acceptée)

  // Un utilisateur ne peut recevoir qu'une invitation unique par organisation
  @@unique([email, organisationId])
}
