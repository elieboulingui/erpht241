// 1. Configuration de base
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 2. Enums (regroupés par domaine)
enum AccessType {
  READ
  WRITE
  ADMIN
}

enum Role {
  ADMIN
  MEMBRE
}

enum Status_Contact {
  PERSONNE
  COMPAGNIE
  GROSSISTE
}

enum Niveau {
  PROSPECT
  CLIENT
  PROSPECT_POTENTIAL
}

enum Domain {
  AGRICULTURE
  ENERGIE
  LOGISTIQUE
  NUMERIQUE
  SECURITE
  TRANSPORT
  INFORMATIQUE
  SANTE
  EDUCATION
  FINANCE
  COMMERCE
  CONSTRUCTION
  ENVIRONNEMENT
  TOURISME
  INDUSTRIE
  TELECOMMUNICATIONS
  IMMOBILIER
  ADMINISTRATION
  ART_CULTURE
  ALIMENTATION
}

enum DevisStatus {
  ATTENTE
  VALIDE
  FACTURE
  ARCHIVE
}

enum TaxType {
  TVA
  HORS_TAXE
}

enum TaskType {
  FEATURE
  BUG
  DOCUMENTATION
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  WAITING
  DONE
  CANCELLED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

// 3. Modèles principaux (organisés par relations)
model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role                 @default(ADMIN)
  accessType          AccessType           @default(READ)
  accounts            Account[]
  sessions            Session[]
  authenticators      Authenticator[]
  organisations       Organisation[]       @relation("OrganisationMembers")
  ownedOrganisations  Organisation[]       @relation("OrganisationOwner")
  invitations         Invitation[]
  passwordResetTokens PasswordResetToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isArchived          Boolean              @default(false)
  archivedAt          DateTime?
  archivedBy          String?
  FeedbackContact     FeedbackContact[]
  notes               Note[]
  collaboratedNotes   Note[]               @relation("NoteCollaborators")
  Devis               Devis[]
  TaskAssignee        Task[]               @relation("TaskAssignee")
  TaskCreator         Task[]               @relation("TaskCreator")
  CreatedActivities   ActivityLog[]        @relation("CreatedByUser")
  UpdatedActivities   ActivityLog[]        @relation("UpdatedByUser")
  
  // Self-referential relations
  createdByUserId     String?
  createdByUser       User?                @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId     String?
  updatedByUser       User?                @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
  
  // Relations de création/mise à jour
  User                User[]               @relation("CreatedByReferences")
  Users               User[]               @relation("UpdatedByReferences")
  Favorite            Favorite[]           @relation("CreatedByReferences")
  Organisation        Organisation[]       @relation("CreatedByReferences")
  Organisations       Organisation[]       @relation("UpdatedByReferences")
  Contact             Contact[]            @relation("CreatedByReferences")
  Contacts            Contact[]            @relation("UpdatedByReferences")
  Comment             Comment[]            @relation("CreatedByReferences")
  Category            Category[]           @relation("CreatedByReferences")
  Categorys           Category[]           @relation("UpdatedByReferences")
  Product             Product[]            @relation("CreatedByReferences")
  Products            Product[]            @relation("UpdatedByReferences")
  Stock               Stock[]              @relation("CreatedByReferences")
  Stocks              Stock[]              @relation("UpdatedByReferences")
  Brand               Brand[]              @relation("CreatedByReferences")
  Brands              Brand[]              @relation("UpdatedByReferences")
  Note                Note[]               @relation("CreatedByReferences")
  Notes               Note[]               @relation("UpdatedByReferences")
  Deviss              Devis[]              @relation("CreatedByReferences")
  FeedbackContacts    FeedbackContact[]    @relation("CreatedByReferences")
  Task                Task[]               @relation("CreatedByReferences")
  Tasks               Task[]               @relation("UpdatedByReferences")
  Devisss             Devis[]              @relation("UpdatedByReferences")
  DevisItem           DevisItem[]          @relation("CreatedByReferences")
  ActivityLog         ActivityLog[]
  ActivityLogss       ActivityLog[]        @relation("RelatedUser")
}

model Organisation {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  logo               String?
  ownerId            String
  owner              User         @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members            User[]       @relation("OrganisationMembers")
  invitations        Invitation[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  isArchived         Boolean      @default(false)
  archivedAt         DateTime?
  archivedBy         String?
  
  // Relations principales
  Product            Product[]
  Stock              Stock[]
  Contact            Contact[]    @relation("OrganisationContacts")
  Category           Category[]
  Brand              Brand[]
  notes              Note[]
  Devis              Devis[]
  Task               Task[]
  Favorite           Favorite[]
  ActivityLogs       ActivityLog[]
  
  // Relations de création/mise à jour
  CreatedActivities  ActivityLog[] @relation("CreatedByUser")
  createdByUserId    String?
  createdByUser      User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId    String?
  updatedByUser      User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

// 4. Modèles d'authentification
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  isArchived Boolean   @default(false)
  archivedAt DateTime?

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  organisationId String
  role           Role
  accessType     AccessType
  invitedById    String
  invitedBy      User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedAt      DateTime     @default(now())
  acceptedAt     DateTime?
  token          String       @unique
  tokenExpiresAt DateTime
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?

  @@unique([email, organisationId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// 5. Modèles de gestion de contacts
model Contact {
  id             String         @id @default(cuid())
  name           String
  logo           String?
  adresse        String?
  status_contact Status_Contact @default(PERSONNE)
  email          String?        @unique
  phone          String?
  niveau         Niveau
  tags           String?
  sector         String?
  organisations  Organisation[] @relation("OrganisationContacts")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isArchived     Boolean        @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations
  comments       Comment[]
  FeedbackContact FeedbackContact[]
  notes          Note[]
  Devis          Devis[]
  Favorite       Favorite[]
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?          @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?          @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  
  // Relation de création
  createdByUserId String?
  createdByUser   User? @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
}

model FeedbackContact {
  id        String   @id @default(cuid())
  message   String
  contactId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation de création
  createdByUserId String?
  createdByUser   User? @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)

  @@index([contactId])
  @@index([userId])
}

model Favorite {
  id             String       @id @default(cuid())
  contactId      String
  organisationId String
  contact        Contact      @relation(fields: [contactId], references: [id])
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  
  // Relation de création
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)

  @@unique([contactId, organisationId])
}

// 6. Modèles de produits et inventaire
model Product {
  id             String       @id @default(cuid())
  name           String
  description    String
  price          Float
  images         String[]
  actions        String?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations
  Stock          Stock[]
  categories     Category[]   @relation("ProductCategories")
  DevisItem      DevisItem[]
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

model Stock {
  id             String       @id @default(cuid())
  quantity       Int
  productId      String
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

model Category {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  logo           String?
  parentId       String?
  parent         Category?    @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children       Category[]   @relation("CategoryToCategory")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations
  Product        Product[]    @relation("ProductCategories")
  Brand          Brand[]      @relation("CategoryBrands")
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)

  @@unique([name, organisationId], name: "category_organisation_unique")
}

model Brand {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  logo           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations
  Category       Category[]   @relation("CategoryBrands")
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

// 7. Modèles de notes
model Note {
  id           String   @id @default(cuid())
  title        String
  content      String
  color        String   @default("default")
  isPinned     Boolean  @default(false)
  lastModified DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId    String
  contact      Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  collaborators User[]  @relation("NoteCollaborators")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isArchived   Boolean  @default(false)
  archivedAt   DateTime?
  archivedBy   String?
  
  // Relations
  Organisation Organisation[]
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User? @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User? @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([contactId])
  @@index([isPinned])
}

// 8. Modèles de devis
model Devis {
  id             String       @id @default(cuid())
  devisNumber    String       @unique
  taxType        TaxType
  status         DevisStatus  @default(ATTENTE)
  totalAmount    Float
  taxAmount      Float
  totalWithTax   Float
  notes          String?
  pdfUrl         String?
  creationDate   DateTime     @default(now())
  lastModified   DateTime     @updatedAt
  archivedDate   DateTime?
  dueDate        DateTime?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  contactId      String
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  items          DevisItem[]
  isArchived     Boolean      @default(false)
  archivedBy     String?
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)
}

model DevisItem {
  id             String       @id @default(cuid())
  description    String
  quantity       Int
  unitPrice      Float
  taxRate        Float
  taxAmount      Float
  totalPrice     Float
  totalWithTax   Float
  creationDate   DateTime     @default(now())
  lastModified   DateTime     @updatedAt
  devisId        String
  devis          Devis        @relation(fields: [devisId], references: [id], onDelete: Cascade)
  productId      String?
  product        Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  // Relation de création
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
}

// 9. Modèles de tâches
model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?
  type           TaskType
  status         TaskStatus   @default(TODO)
  priority       TaskPriority
  assigneeId     String?
  assignee       User?        @relation(fields: [assigneeId], references: [id], name: "TaskAssignee", onDelete: SetNull)
  dueDate        DateTime?
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id], name: "TaskCreator", onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isArchived     Boolean      @default(false)
  archivedAt     DateTime?
  archivedBy     String?
  
  // Relations de création/mise à jour
  createdByUserId String?
  createdByUser   User?        @relation("CreatedByReferences", fields: [createdByUserId], references: [id], onDelete: SetNull)
  updatedByUserId String?
  updatedByUser   User?        @relation("UpdatedByReferences", fields: [updatedByUserId], references: [id], onDelete: SetNull)

  @@index([assigneeId])
  @@index([organisationId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
}

// 10. Modèle de journal d'activité
model ActivityLog {
  id             String       @id @default(cuid())
  action         String
  entityType     String
  entityId       String
  oldData        Json?
  newData        Json?
  
  // User qui a effectué l'action
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull, map: "ActivityLog_userId_fkey")
  
  // Contexte d'organisation
  organisationId String?
  organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  
  // Référence du créateur
  createdByUserId String?
  createdBy      User?        @relation("CreatedByUser", fields: [createdByUserId], references: [id], map: "ActivityLog_createdBy_fkey")
  
  // Référence de mise à jour
  updatedByUserId String?
  updatedBy      User?        @relation("UpdatedByUser", fields: [updatedByUserId], references: [id], map: "ActivityLog_updatedBy_fkey")
  
  // Utilisateur concerné (si l'action affecte un autre utilisateur)
  relatedUserId  String?
  relatedUser    User?        @relation("RelatedUser", fields: [relatedUserId], references: [id], onDelete: SetNull, map: "ActivityLog_relatedUser_fkey")

  createdAt      DateTime     @default(now())
  ipAddress      String?
  userAgent      String?
  actionDetails  String?
  entityName     String?

  @@index([userId])
  @@index([entityType, entityId])
  @@index([organisationId])
  @@index([createdAt])
  @@index([action])
  @@index([relatedUserId])
  
  // Relations diverses

  Organisation Organisation[] @relation("CreatedByUser")
}