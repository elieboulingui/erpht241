// Définition de la source de données (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
}

enum Status_Contact {
  PERSONNE
  COMPAGNIE
}

// Enumération des rôles d'un utilisateur dans une organisation
enum Role {
  ADMIN
  MEMBRE
}

// Enumération des stages d'un contact
enum Stage {
  LEAD
  WON
  QUALIFIED
}

// Modèle User - Utilisateur
model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role                 @default(ADMIN) // Rôle par défaut
  accounts            Account[]
  sessions            Session[]
  authenticators      Authenticator[] // Support pour l'authentification WebAuthn
  organisations       Organisation[]       @relation("OrganisationMembers") // Organisation(s) dont l'utilisateur est membre
  ownedOrganisations  Organisation[]       @relation("OrganisationOwner") // Organisation(s) que l'utilisateur possède
  invitations         Invitation[] // Invitations envoyées à l'utilisateur
  passwordResetTokens PasswordResetToken[] // Tokens de réinitialisation de mot de passe
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isArchived          Boolean              @default(false) // Champ d'archivage
  archivedAt          DateTime? // Date d'archivage
  archivedBy          String? // ID de l'utilisateur ayant archivé

  FeedbackContact FeedbackContact[]
}

// Modèle Organisation
model Organisation {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  logo        String? // URL du logo
  ownerId     String // ID de l'utilisateur propriétaire
  owner       User         @relation("OrganisationOwner", fields: [ownerId], references: [id], onDelete: Cascade) // Relation inverse pour le propriétaire
  members     User[]       @relation("OrganisationMembers") // Membres de l'organisation
  invitations Invitation[] // Invitations envoyées aux utilisateurs
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isArchived  Boolean      @default(false) // Champ d'archivage
  archivedAt  DateTime? // Date d'archivage
  archivedBy  String? // ID de l'utilisateur ayant archivé
  Product     Product[] // Liste des produits associés à l'organisation
  Stock       Stock[]
  Contact     Contact[]    @relation("OrganisationContacts") // Contacts associés à l'organisation
  Category    Category[] // Catégories associées à l'organisation
}

// Modèle Account - Compte d'utilisateur pour l'authentification (OAuth, etc.)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Index composite sur provider et providerAccountId
}

// Modèle Session - Session utilisateur
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle VerificationToken - Token de vérification d'email
model VerificationToken {
  identifier String   // L'email ou un identifiant unique pour l'utilisateur
  token      String   // Le token de vérification
  expires    DateTime // La date d'expiration du token
  isArchived Boolean  @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage
  
  @@id([identifier, token]) // Clé primaire composée pour garantir l'unicité
}

// Modèle Authenticator - Informations pour l'authentification WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID]) // Identifiant composite pour l'authentification
}

// Modèle Invitation - Invitation d'un utilisateur à rejoindre une organisation
model Invitation {
  id             String     @id @default(cuid())
  email          String     // Email de l'utilisateur invité
  organisationId String     // ID de l'organisation
  role           Role       // Rôle de l'utilisateur dans l'organisation
  invitedById    String     // ID de l'utilisateur qui a envoyé l'invitation
  invitedBy      User       @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedAt      DateTime   @default(now())
  acceptedAt     DateTime?  // La date où l'invitation a été acceptée (null si non acceptée)
  token          String     @unique // Le token de l'invitation
  tokenExpiresAt DateTime   // Date d'expiration du token
  isArchived     Boolean    @default(false)  // Champ d'archivage
  archivedAt     DateTime?  // Date d'archivage
  archivedBy     String?    // ID de l'utilisateur ayant archivé

  // Un utilisateur ne peut recevoir qu'une invitation unique par organisation
  @@unique([email, organisationId])
}

// Modèle PasswordResetToken - Token pour la réinitialisation de mot de passe
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   // ID de l'utilisateur
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique // Le token de réinitialisation
  expiresAt DateTime // Date d'expiration du token
  createdAt DateTime @default(now())
}

// Modèle Contact - Contact lié à une organisation
model Contact {
  id             String         @id @default(cuid()) // Identifiant unique du contact
  name           String // Nom du contact
  logo           String?
  adresse        String
  status_contact Status_Contact @default(PERSONNE) // Status du contact (PERSONNE ou COMPAGNIE)
  record         String
  email          String         @unique // Email du contact (unique)
  phone          String? // Téléphone du contact (optionnel)
  stage          Stage // Stage du contact dans le processus (LEAD ou WON)
  tags           String? // Liste des informations supplémentaires sous forme de tab (ex: JSON, String[])
  organisations  Organisation[] @relation("OrganisationContacts") // Relation many-to-many avec Organisation

  createdAt  DateTime  @default(now()) // Date de création du contact
  updatedAt  DateTime  @updatedAt // Date de mise à jour du contact
  isArchived Boolean   @default(false) // Champ d'archivage
  archivedAt DateTime? // Date d'archivage
  archivedBy String? // ID de l'utilisateur ayant archivé
  comments   Comment[] // Liste des commentaires associés au contact

  FeedbackContact FeedbackContact[]
}

// Modèle Comment - Commentaire associé à un contact
model Comment {
  id        String   @id @default(cuid()) // Identifiant unique du commentaire
  content   String   // Le contenu du commentaire
  createdAt DateTime @default(now()) // Date de création du commentaire
  contactId String   // ID du contact associé
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade) // Relation avec le contact

  updatedAt DateTime @updatedAt // Date de mise à jour du commentaire
}

// Modèle Product - Produit
model Product {
  id             String     @id @default(cuid())  // Identifiant unique du produit
  name           String     // Nom du produit
  description    String     // Description du produit
  price          Float      // Prix du produit
  images         String[]   // Liste des URLs des images du produit
  actions        String?    // Actions possibles (par exemple, JSON ou texte décrivant les actions)
  organisationId String     // ID de l'organisation associée
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade) // Relation avec l'organisation
  
  createdAt      DateTime   @default(now()) // Date de création du produit
  updatedAt      DateTime @updatedAt      // Date de mise à jour du produit
  isArchived     Boolean   @default(false) // Champ d'archivage
  archivedAt     DateTime? // Date d'archivage
  archivedBy     String?   // ID de l'utilisateur ayant archivé
  Stock          Stock[]
  
  categories     Category[] @relation("ProductCategories") // Relation many-to-many avec Category

}

// Modèle Stock - Stock d'un produit
model Stock {
  id            String   @id @default(cuid()) // Identifiant unique du stock
  quantity      Int      // Quantité disponible du produit dans le stock
  productId     String   // ID du produit
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Relation avec le produit
  organisationId String  // ID de l'organisation associée
  organisation  Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade) // Relation avec l'organisation

  createdAt     DateTime @default(now()) // Date de création du stock
  updatedAt     DateTime @updatedAt // Date de mise à jour du stock
  isArchived    Boolean  @default(false) // Champ d'archivage
  archivedAt    DateTime? // Date d'archivage
  archivedBy    String?  // ID de l'utilisateur ayant archivé
}

// Modèle Category - Catégorie de produit
model Category {
  id             String        @id @default(cuid())  // Identifiant unique de la catégorie
  name           String        // Nom de la catégorie
  description    String?       // Description de la catégorie (optionnelle)
  organisationId String        // ID de l'organisation associée
  organisation   Organisation  @relation(fields: [organisationId], references: [id], onDelete: Cascade) // Relation avec l'organisation
  logo           String?
  parentId       String?       // ID de la catégorie parente (optionnel)
  parent         Category?     @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade) // Relation avec la catégorie parente
  children       Category[]    @relation("CategoryToCategory") // Relation avec les catégories enfants

  createdAt      DateTime      @default(now()) // Date de création de la catégorie
  updatedAt      DateTime      @updatedAt      // Date de mise à jour de la catégorie
  isArchived     Boolean       @default(false) // Champ d'archivage
  archivedAt     DateTime?     // Date d'archivage
  archivedBy     String?       // ID de l'utilisateur ayant archivé

  @@unique([name, organisationId], name: "category_organisation_unique")
  Product Product[] @relation("ProductCategories")
}

// Modèle FeedbackContact - Retour d'un utilisateur sur un contact
model FeedbackContact {
  id          String    @id @default(cuid())
  message     String    // Message du feedback
  contactId   String    // ID du contact concerné
  userId      String    // ID de l'utilisateur ayant laissé le feedback
  createdAt   DateTime  @default(now()) // Date de création du feedback
  updatedAt   DateTime  @updatedAt // Date de mise à jour du feedback

  // Relations
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexation pour améliorer les performances des requêtes
  @@index([contactId])
  @@index([userId])
}
