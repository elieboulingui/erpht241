"use client"
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { usePathname } from "next/navigation";

export function Generateiacategorie() {
  const [open, setOpen] = useState(false); 
  const [isGenerating, setIsGenerating] = useState(false);
  const [domain, setDomain] = useState(""); // Domaine d'activit√©
  const [categories, setCategories] = useState<string[]>([]); // Cat√©gories g√©n√©r√©es par l'IA
  const [organisationId, setOrganisationId] = useState<string | null>(null);
  const [isAdding, setIsAdding] = useState(false);

  const pathname = usePathname();

  const extractOrganisationId = (url: string): string | null => {
    const regex = /listing-organisation\/([a-zA-Z0-9_-]+)\/produit/;
    const match = url.match(regex);
    return match ? match[1] : null;
  };

  useEffect(() => {
    if (pathname) {
      const id = extractOrganisationId(pathname);
      if (id) {
        setOrganisationId(id);
      } else {
        console.error("Organisation ID not found in the URL.");
      }
    }
  }, [pathname]);

  // Appel √† l'IA pour g√©n√©rer les cat√©gories li√©es √† un domaine donn√©
  const fetchCategories = async (domain: string) => {
    const apiKey = process.env.NEXT_PUBLIC_GOOGLE_API_KEY;
    if (!apiKey) {
      console.error("‚ùå API key is missing!");
      alert("Cl√© API manquante. V√©rifiez votre configuration.");
      return;
    }
  
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  
    const structuredPrompt = `
      Vous √™tes un assistant IA qui g√©n√®re une liste de cat√©gories en fonction du domaine donn√©.
      R√©pondez uniquement avec un JSON valide contenant une cl√© "categories" avec un tableau de cat√©gories.
  
      Domaine: "${domain}"
  
      R√©ponse attendue :
      {
        "categories": ["Cat√©gorie 1", "Cat√©gorie 2", "Cat√©gorie 3"]
      }
    `;
  
    try {
      setIsGenerating(true);
  
      const response = await model.generateContent(structuredPrompt);
  
      if (!response) {
        console.error("‚ùå Aucune r√©ponse de l'IA.");
        alert("L'IA n'a pas r√©pondu. R√©essayez plus tard.");
        return;
      }
  
      console.log("üîç R√©ponse brute de l'IA:", response);
  
      const textResponse = await response.response.text();
  
      console.log("üìÑ Contenu de la r√©ponse IA:", textResponse);
  
      const cleanedText = textResponse.replace(/```json|```/g, "").trim();
      const jsonResponse = JSON.parse(cleanedText);
      
  
      if (jsonResponse?.categories && Array.isArray(jsonResponse.categories)) {
        setCategories(jsonResponse.categories);
      } else {
        console.error("‚ùå Format JSON invalide :", jsonResponse);
        alert("La r√©ponse de l'IA n'est pas bien format√©e.");
      }
    } catch (error) {
      console.error("‚ö†Ô∏è Erreur lors de la requ√™te AI:", error);
      alert("Une erreur est survenue. V√©rifiez la console pour plus de d√©tails.");
    } finally {
      setIsGenerating(false);
    }
  };
  
  
  


  // G√©rer l'entr√©e du domaine
  const handleDomainChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDomain(e.target.value);
  };

  return (
    <>
      <Button
        onClick={() => setOpen(true)}
        className="bg-black hover:bg-black text-white font-medium px-6 py-2.5 shadow-lg hover:shadow-xl transition-all duration-200"
        disabled={isGenerating || isAdding}
      >
        G√©n√©rer des cat√©gories
      </Button>

      <Dialog open={open} onOpenChange={setOpen}>
      <DialogContent className="max-w-6xl h-[50vh] bg-white rounded-xl shadow-2xl border-0 p-0 overflow-hidden overflow-y-auto">
          <DialogHeader className="bg-gradient-to-r from-indigo-50 to-violet-50 p-6 border-b border-gray-100">
            <DialogTitle className="text-2xl font-bold text-black text-center">
              G√©n√©ration un domain d activite
            </DialogTitle>
          </DialogHeader>

          <div className="p-6">
            {isGenerating && (
              <div className="absolute inset-0 bg-white/80 backdrop-blur-sm z-50 flex items-center justify-center">
                <div className="flex flex-col items-center gap-3 p-6 bg-white rounded-xl shadow-lg">
                  <Loader2 className="h-10 w-10 text-black animate-spin" />
                  <p className="text-lg font-medium text-gray-700">G√©n√©ration en cours...</p>
                </div>
              </div>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <div className="space-y-8">
                {/* Formulaire pour saisir le domaine d'activit√© */}
                <div>
                  <label htmlFor="domain" className="block text-lg font-semibold mb-2">
                    Domaine d'activit√©
                  </label>
                  <input
                    type="text"
                    id="domain"
                    value={domain}
                    onChange={handleDomainChange}
                    className="w-full p-3 border border-gray-300 rounded-md"
                    placeholder="Entrez un domaine d'activit√©..."
                  />
                  <Button
                    onClick={() => fetchCategories(domain)}
                    className="mt-4 w-full bg-blue-600 text-white"
                    disabled={isGenerating}
                  >
                    G√©n√©rer les cat√©gories
                  </Button>
                </div>

                {/* Affichage des cat√©gories g√©n√©r√©es */}
                {categories.length > 0 && (
                  <div>
                    <h2 className="text-xl font-bold mb-3">Cat√©gories g√©n√©r√©es</h2>
                    {categories.map((category, index) => (
                      <div key={index} className="mb-4">
                        <input
                          type="text"
                          value={category}
                          readOnly
                          className="w-full p-3 border border-gray-300 rounded-md"
                        />
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
